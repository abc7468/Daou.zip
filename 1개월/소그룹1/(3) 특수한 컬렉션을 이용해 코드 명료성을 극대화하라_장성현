배열은 유연하지만 필요 이상으로 복잡한 상황, 코드를 만들기도 한다. 그렇기에 JS가 제공하는 다양한 컬렉션들을 잘 이용하는 것이 중요하다.

### 객체

- 변화가 없고 구조화된 키-값의 데이터를 다루는 경우에 유용하다.
- 정보의 경로를 알고 있을 때 적절한 방법이다.
- 객체를 함수의 매개변수로 사용하기 위해서는 사이드 이펙트를 방지하기 위해 복사한 객체를 삽입한다.
- **Object.assign** 함수를 활용하여 객체를 갱신할 수 있다.
    - 중첩된 객체의 경우  Object.assign() 함수가 생각처럼 동작하지 않는다.
        - 해결 방법 1. 중첩된 객체 사용하지 않기
        - 해결 방법 2. Object.assign()을 사용하여 객체 내부에 중첩된 객체 역시 복사
- **객체 펼침 연산자**를 활용하여 객체를 갱신할 수 있다.
    - 배열  펼침 연산자와 사용법은 비슷하다.
        - 독립적으로 사용할 수 없고 객체에 펼쳐지게 해야함
        - Object.assign과 같이 중첩된 객체가 있는 경우는 객체를 복사하지 않고 객체 참조만 복사

### 맵

- 객체의 경우 값 추가, 삭제, 초기화 모두 다른 패러다임을 사용하게 된다.
    
    → 맵을 사용하게 되면 맵 하나의 패러다임으로 이를 해결할 수 있다.
    

```jsx
// 맵 인스턴스를 생성하는 방법
let filters = new Map()
	.set('A','에이')
	.set('B','비')
	.set('C','씨') // 체이닝을 활용하여 메서드를 연결할 수 있음
filters.get('A');
//'에이'

// 맵에서 값을 제거하는 방법
filters.delete('C');

// 모든 값을 제거하는 방법
filters.clear();
```

- 객체의 경우 키 값은 모두 정수로 반환 되지만 맵은 어떠한 자료형도 키로 받을 수 있다.